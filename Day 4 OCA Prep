Q16. Which of these compile when replaceing 8? (Choose all that apply)
7:  char[]c = new char[2];
8:  //INSERT CODE HERE
•	  A. int length = c.capacity;
•	  B. int length = c.capacity();
•	[C] C. int length = c.length;
•	  D. int length = c.length();
•	  E. int length = c.size;
•	  F. int length = c.size();
•	  G. None of the above.
A16.
Arrays define a property called length. It is not a method, so parentheses are not allowed.
Q17. Which of these compile when replaceing 8? (Choose all that apply)
7:  ArrayList l  = new ArrayList();
8:  //INSERT CODE HERE
•	  A. int length = l.capacity;
•	  B. int length = l.capacity();
•	  C. int length = l.length;
•	  D. int length = l.length();
•	  E. int length = l.size;
•	  F. int length = l.size();
•	  G. None of the above.
A17.
The ArrayList class defines a method called size().
Q18. Which of the following are true? (Choose all that apply)
•	  A. An array has a fixed size.
•	  B. An ArrayList has a fixed size.
•	  C. An array allows multiple demensions.
•	  D. An array is ordered.
•	  E. An ArrayList is ordered.
•	  F. An array is immutable
•	  G. An ArrayList is immutable
A18.
An array is not able to change size and can have multiple dimensions. Both an array and ArrayList are ordered and have indexes. Neither is immutable. The elements can change value.
Q19. Which of the following are true? (Choose all that apply)
•	  A. Two arrays with the same content are equal.
•	  B. Two ArrayLists with the same content are equal.
•	  C. If you call remove(0) using an empty ArrayList object, it will compile successfully.
•	  D. If you call remove(0) using an empty ArrayList object, it will run successfully.
•	  E. None of the above.
A19.
An array does not override equals() and so uses object equality. ArrayList does override equals() and defines it as the same elements in the same order. The compiler does not know when an index is out of bounds and thus can't give you a compiler error. The code will throw and exception at runtime, though.
Q20. What is the result of the following statements?
6:  List<String> list = new ArrayList<String>();
7:  list.add("one");
8:  list.add("two");
9:  list.add(7);
10: for(String s: list) System.out.print(s);
•	  A. onetwo
•	  B. onetwo7
•	  C. onetwo followed by an exception
•	  D. Compiler error on line 9.
•	  E. Compiler error on line 10.
A20.
The code does not compile because list is instantiated using generics. Only String objects can be added to list and 7 is an int.
Q21. What is the result of the following statements?
3:  ArrayList<Integer> values = new ArrayList<String>();
4:  values.add(4);
5:  values.add(5);
6:  values.set(1, 6);
7:  values.remove(0);
8:  for (Integer v: values) System.out.print(v);
•	  A. 4
•	  B. 5
•	  C. 6
•	  D. 46
•	  E. 45
•	  F. An exception is thrown.
•	  G. The code does not compile.
A21.
After line 4, values has one element (4). After line 5, values has two elements (4, 5). After line 6, values has two elements (4, 6) becasue set() does a replace. After line 7, values has only one element (6).
Q22. What is the result of the following?
int[] random = { 6, -4, 12, 0 , -10};
int x = 12;
int y = Arrays.binarySearch(random, x);
System.out.println(y);
•	  A. 2
•	  B. 4
•	  C. 6
•	  D. The result is undefined.
•	  E. An exception is thrown.
•	  F. The code does not compile.
A22.
The code compiles and runs fine. However, an array must be sorted for binarySearch() to return a meaningful result.
Q23. What is the result of the following?
4:  List<Integer> list = Arrays.asList(10, 4, -1, 5);
5:  Collections.sort(list);
6:  Integer array[] = list.toArray(new Integer[4]);
7:  System.out.println(array[0]);
•	  A. -1
•	  B. 10
•	  C. Compiler error on line 4.
•	  D. Compiler error on line 5.
•	  E. Compiler error on line 6.
•	  F. An exception is thrown.
A23.
Line 4 creates a fixed size array of size 4. Line 5 sorts it. Line 6 converts it back to an array. The brackets aren't in the traditional place, but they are still legal. Line 7 prints the first element, which is now -1.
Q24. What is the result of the following?
6:  String [] names = {"Tom", "Dick", "Harry"};
7:  List<String> list = names.asList();
8:  list.set(0, "Sue");
9:  System.out.println(names[0]);
•	  A. Sue
•	  B. Tom
•	  C. Compiler error on line 7.
•	  D. Compiler error on line 8.
•	  E. An exception is thrown.
A24.
Converting from an array to an ArrayList uses Arrays.asList(names). There is no asList() method on an array instance. If this code were corrected to compile, the answer would be option A.
Q25. What is the result of the following?
List<String> hex = Arrays.asList("30", "8", "3A", "FF");
Collections.sort(hex);
int x = Collections.binarySearch(hex "8");
int y = Collections.binarySearch(hex "3A");
int z = Collections.binarySearch(hex "4F");
System.out.println(x + " " + y + " " + z);
•	  A. 0 1 -2
•	  B. 0 1 -3
•	  C. 2 1 -2
•	  D. 2 1 -3
•	  E. None of the above.
•	  F. The code doesn't compile.
A25.
After sorting, hex conatins [30, 3A, 8, FF]. Remember that numbers sort before letters and strings sort alphabetically. This makes 30 come before 8. A binary search correctly finds 8 at index 2 and 3A at index 1. It cannot find 4F but notices it should be at index 2. The rule when in item isn't found is to negate that index and subtract 1. Therefore we get -2-1, which is -3.
Q26. Which of the following are true statements about the following code? (Choose all that apply)
4:  List<Integer> ages = new ArrayList<>();
5:  ages.add(Integer.parseInt("5"));
6:  ages.add(Integer.valueOf("6"));
7:  ages.add(7);
8:  ages.add(null);
9:  for (int age: ages) System.out.print(age);
•	  A. The code compiles.
•	  B. The code throws a runtime exception.
•	  C. Exactly one of the add statements uses autoboxing.
•	  D. Exactly two of the add statements use autoboxing.
•	  E. Exactly thress of the add statements use autoboxing.
A26.
Lines 5 and 7 use autoboxing to convert an int to an Integer. Line 6 does not because valueOf() returns an Integer. Line 8 does not because null is not an int. The code does compile. However, when the for loop tries to unbox null into an int, it fails and throws a NullPointerException.
Q27. What is the result of the following?
List<String> one = new ArrayList<String>();
one.add("abc");
List<String> two = new ArrayList<>();
two.add("abc");
if(one == two)
  System.out.println("A");
else if (one.equals(two))
  System.out.println("B");
else
  System.out.println("C");
•	  A. A
•	  B. B
•	  C. C
•	  D. An exception is thrown.
•	  E. The code does not compile.
A27.
The first if statement is false becasue the variables do not point to the same object. The second if statement is true becasue ArrayList implements equality to mean the same elements in the same order.
Q28. Which of the following can be inserted into the blank to create a date of June 21, 2014? (Choose all that apply)
import java.time.*;

public class StartOfSummer {

  public static void main(String[] args) {
    LocalDate date = ____________________
  }
  
}
•	  A. new LocalDate(2014, 5, 21);
•	  B. new LocalDate(2014, 6, 21);
•	  C. LocalDate.of(2014, 5, 21);
•	  D. LocalDate.of(2014, 6, 21);
•	  E. LocalDate.of(2014, Calendar.JUNE, 21);
•	  F. LocalDate.of(2014, Month.JUNE, 21);
A28.
Options A and B are incorrect because LocalDate does not have a public constructor. Option C is incorrect because months start counting with 1 rather than 0. Option E is incorrect because it uses the old pre-Java 8 way of counting months, again beginning at 0. Options D and F are both correct ways of specifying the desired date.
Q29. What is the output of the following code?
LocalDate date = LocaleDate.parse("2018-04-30", DateTimeFormatter.ISO_LOCAL_DATE);
date.plusDays(2);
date.plusHours(3);
System.out.println(date.getYear() + " " + date.getMonth() + " " + date.getDayOfMonth());
•	  A. 2018 APRIL 2
•	  B. 2018 APRIL 30
•	  C. 2018 MAY 2
•	  D. Another date.
•	  E. The code does not compile.
•	  F. A runtime exception is thrown.
A29.
A LocalDate does not have a time element. Therefore, it has no method to add hours and the code does not compile.
Q30. What is the output of the following code?
LocalDate date = LocaleDate.of(2018, Month.APRIL, 40);
System.out.println(date.getYear() + " " + date.getMonth() + " " + date.getDayOfMonth());
•	  A. 2018 APRIL 4
•	  B. 2018 APRIL 30
•	  C. 2018 MAY 10
•	  D. Another date.
•	  E. The code does not compile.
•	  F. A runtime exception is thrown.
A30.
Java throws an exception if invalid date values are passed. There is not 40th day in April -- or any other month for that matter.
Q31. What is the output of the following code?
LocalDate date = LocaleDate.of(2018, Month.APRIL, 30);
date.plusDays(2);
date.plusYears(3);
System.out.println(date.getYear() + " " + date.getMonth() + " " + date.getDayOfMonth());
•	  A. 2018 APRIL 2
•	  B. 2018 APRIL 30
•	  C. 2018 MAY 2
•	  D. 2021 APRIL 2
•	  E. 2021 APRIL 30
•	  F. 2021 MAY 2
•	  G. A runtime exception is thrown.
A31.
The date starts out as April 30, 2018. Since dates are immutable and the plus methods have their return values ignored, the result is unchanged. Therefore, option B is correct.
Q32. What is the output of the following code?
LocalDateTime d = LocaleDateTime.of(2015, 5, 10, 11, 22, 33);
Period p = Period.of(1, 2, 3);
d = d.minus(p);
DateTimeFormatter f = DateTimeFormatter.ofLocalizedTime(FormatStyle.SHORT);
System.out.println(d.format(f));
•	  A. 3/7/14 11:22 AM
•	  B. 5/10/15 11:22 AM
•	  C. 3/7/14
•	  D. 5/10/15
•	  E. 11:22 AM
•	  F. The code does not compile.
•	  G. A runtime exception is thrown.
A32.
Even though d have both date and time, the formmatter only outputs time.
Q33. What is the output of the following code?
LocalDateTime d = LocaleDateTime.of(2015, 5, 10, 11, 22, 33);
Period p = Period.ofDays(1).ofYears(2);
d = d.minus(p);
DateTimeFormatter f = DateTimeFormatter.ofLocalizedTime(FormatStyle.SHORT);
System.out.println(d.format(f));
•	  A. 5/9/13 11:22 AM
•	  B. 5/10/13 11:22 AM
•	  C. 5/9/14
•	  D. 5/10/14
•	  E. 11:22 AM
•	  F. The code does not compile.
•	  G. A runtime exception is thrown.
A33.
Period does not allow chaining. Only the last Period method called counts, so only the two years are subtracted.

